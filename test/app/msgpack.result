buffer = require 'buffer'
---
...
msgpack = require 'msgpack'
---
...
-- Arguments check.
buf = buffer.ibuf()
---
...
msgpack.encode()
---
- error: 'msgpack.encode: a Lua object expected'
...
msgpack.encode('test', 'str')
---
- error: expected cdata as 2 argument
...
msgpack.encode('test', buf.buf)
---
- error: 'msgpack.encode: argument 2 must be of type ''struct ibuf'''
...
msgpack.decode()
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(123)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(buf)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(buf.buf, 'size')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
msgpack.decode('test', 0)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode('test', 5)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode('test', 'offset')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
msgpack.decode_unchecked()
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked(123)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked(buf)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked('test', 0)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode_unchecked('test', 5)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode_unchecked('test', 'offset')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
-- Encode/decode a string.
s = msgpack.encode({1, 2, 3}) .. msgpack.encode({4, 5, 6})
---
...
obj, offset = msgpack.decode(s)
---
...
obj
---
- [1, 2, 3]
...
obj, offset = msgpack.decode(s, offset)
---
...
obj
---
- [4, 5, 6]
...
offset == #s + 1
---
- true
...
obj, offset = msgpack.decode_unchecked(s)
---
...
obj
---
- [1, 2, 3]
...
obj, offset = msgpack.decode_unchecked(s, offset)
---
...
obj
---
- [4, 5, 6]
...
offset == #s + 1
---
- true
...
-- Encode/decode a buffer.
buf = buffer.ibuf()
---
...
len = msgpack.encode({1, 2, 3}, buf)
---
...
len = msgpack.encode({4, 5, 6}, buf) + len
---
...
buf:size() == len
---
- true
...
orig_rpos = buf.rpos
---
...
obj, rpos = msgpack.decode(buf.rpos, buf:size())
---
...
obj
---
- [1, 2, 3]
...
buf.rpos = rpos
---
...
obj, rpos = msgpack.decode(buf.rpos, buf:size())
---
...
obj
---
- [4, 5, 6]
...
buf.rpos = rpos
---
...
buf:size() == 0
---
- true
...
buf.rpos = orig_rpos
---
...
obj, rpos = msgpack.decode_unchecked(buf.rpos, buf:size())
---
...
obj
---
- [1, 2, 3]
...
buf.rpos = rpos
---
...
obj, rpos = msgpack.decode_unchecked(buf.rpos, buf:size())
---
...
obj
---
- [4, 5, 6]
...
buf.rpos = rpos
---
...
buf:size() == 0
---
- true
...
-- Invalid msgpack.
s = msgpack.encode({1, 2, 3})
---
...
s = s:sub(1, -2)
---
...
msgpack.decode(s)
---
- error: 'msgpack.decode: invalid MsgPack'
...
buf = buffer.ibuf()
---
...
msgpack.encode({1, 2, 3}, buf)
---
- 4
...
msgpack.decode(buf.rpos, buf:size() - 1)
---
- error: 'msgpack.decode: invalid MsgPack'
...
